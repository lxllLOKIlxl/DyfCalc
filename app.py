import matplotlib.pyplot as plt
import numpy as np
import streamlit as st
import sympy as sp
import firebase_admin
from firebase_admin import credentials, db

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Firebase –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
if not firebase_admin._apps:
    cred = credentials.Certificate({
        "type": st.secrets["firebase"]["type"],
        "project_id": st.secrets["firebase"]["project_id"],
        "private_key_id": st.secrets["firebase"]["private_key_id"],
        "private_key": st.secrets["firebase"]["private_key"].replace("\\n", "\n"),
        "client_email": st.secrets["firebase"]["client_email"],
        "client_id": st.secrets["firebase"]["client_id"],
        "auth_uri": st.secrets["firebase"]["auth_uri"],
        "token_uri": st.secrets["firebase"]["token_uri"],
        "auth_provider_x509_cert_url": st.secrets["firebase"]["auth_provider_x509_cert_url"],
        "client_x509_cert_url": st.secrets["firebase"]["client_x509_cert_url"]
    })
    firebase_admin.initialize_app(cred, {
        'databaseURL': st.secrets["firebase"]["databaseURL"]
    })

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Firebase
def send_message(user, text):
    try:
        ref = db.reference('messages')
        new_message = {
            "user": user,
            "text": text
        }
        ref.push(new_message)
        st.success("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ–∑ Firebase
def get_messages():
    try:
        ref = db.reference('messages')
        messages = ref.get()
        if messages:
            return [(msg["user"], msg["text"]) for msg in messages.values()]
        return []
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
        return []

# –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
if 'user_count' not in st.session_state:
    st.session_state['user_count'] = 1
st.session_state['user_count'] += 1

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ñ–∑ —Å—Ç–∏–ª–µ–º
st.markdown("<h1 style='text-align: center; color: blue;'>üî¢ DyfCalc</h1>", unsafe_allow_html=True)
st.markdown("<h3 style='text-align: center; color: gray;'>–Ü–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è —Ç–∞ –î–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ—é–≤–∞–Ω–Ω—è –§—É–Ω–∫—Ü—ñ–π</h3>", unsafe_allow_html=True)
st.markdown("---")

# –ë–æ–∫–æ–≤–∞ –ø–∞–Ω–µ–ª—å —ñ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
with st.sidebar:
    # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    st.header("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
    st.markdown(f"![–õ—é–¥–∏–Ω–∞](https://img.icons8.com/emoji/48/null/bust-in-silhouette.png) **{st.session_state['user_count']} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á(—ñ/—ñ–≤) –æ–Ω–ª–∞–π–Ω**")
    st.markdown("---")

    # –ß–∞—Ç
    st.header("üí¨ –û–Ω–ª–∞–π–Ω-—á–∞—Ç")
    messages = get_messages()
    for user, text in messages:
        st.write(f"**{user}:** {text}")

    # –ü–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    user_name = st.text_input("–í–∞—à–µ —ñ–º'—è (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)", key="user_name")
    user_message = st.text_input("–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", key="user_message")
    if st.button("–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏"):
        if user_name and user_message:
            send_message(user_name, user_message)
        else:
            st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è!")

    st.markdown("---")
    st.header("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    operation = st.radio("–û–±–µ—Ä—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é:", ["–Ü–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è", "–î–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ—é–≤–∞–Ω–Ω—è"])
    st.markdown("---")
    st.header("üé® –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è")
    theme = st.radio("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", ["–°–≤—ñ—Ç–ª–∞", "–¢–µ–º–Ω–∞"])
    st.markdown("---")
    st.markdown(
        """
        <div style="text-align: center; color: gray;">
        –ü—Ä–æ–≥—Ä–∞–º–∞ ver 1.0 ‚Ä¢ –ó–∞–ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º Sm
        </div>
        """, unsafe_allow_html=True
    )

# –í–≤–µ–¥–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
st.markdown(
    """
    <div style="border: 1px solid #ccc; padding: 10px; border-radius: 8px; box-shadow: 2px 2px 5px rgba(0,0,0,0.1);">
    <h4>üßÆ –í–≤–µ–¥—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è:</h4>
    </div>
    """,
    unsafe_allow_html=True
)
user_function = st.text_input("–ù–∞–ø—Ä–∏–∫–ª–∞–¥, x**2 - 4*x + y + z", placeholder="x**2 - 4*x + y + z")

# –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
if user_function:
    try:
        x, y, z = sp.symbols('x y z')
        function = sp.sympify(user_function)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å
        if sp.simplify(function).has(sp.zoo) or sp.simplify(function).has(sp.oo):
            raise ValueError("–§—É–Ω–∫—Ü—ñ—è –º–∞—î –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è!")

        # –ü—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω—å –¥–ª—è –∑–º—ñ–Ω–Ω–∏—Ö y —ñ z
        substitutions = {var: 1 for var in [y, z] if var in function.free_symbols}
        function = function.subs(substitutions)

        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —á–∏—Å–ª–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        func_np = sp.lambdify(x, function, "numpy")
        x_vals = np.linspace(-10, 10, 500)
        y_vals = func_np(x_vals)

        # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–µ–Ω—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ—ó
        roots = sp.solve(function, x)
        roots_np = [float(root.evalf()) for root in roots if sp.im(root) == 0]

        # –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
        if st.checkbox("üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó"):
            fig, ax = plt.subplots(figsize=(8, 5))
            ax.plot(x_vals, y_vals, label=f"f(x) = {user_function}", color="blue")

            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ—á–æ–∫ –ø–µ—Ä–µ—Ç–∏–Ω—É
            for root in roots_np:
                ax.scatter(root, 0, color="red", s=50, label=f"–¢–æ—á–∫–∞ –ø–µ—Ä–µ—Ç–∏–Ω—É: {root:.2f}")
                ax.annotate(
                    f"{root:.2f}",
                    (root, 0),
                    textcoords="offset points",
                    xytext=(0, 10),
                    ha="center",
                    fontsize=10,
                    bbox=dict(boxstyle="round,pad=0.3", edgecolor="red", facecolor="lightyellow")
                )

            ax.set_title("–ì—Ä–∞—Ñ—ñ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó", fontsize=16)
            ax.set_xlabel("x", fontsize=14)
            ax.set_ylabel("f(x)", fontsize=14)
            ax.legend(loc="upper left")
            ax.grid(True)

            st.pyplot(fig)

    except ValueError as ve:
        st.error(f"–ü–æ–º–∏–ª–∫–∞: {ve}")
    except Exception as e:
        st.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è
if st.button("üîç –û–±—á–∏—Å–ª–∏—Ç–∏"):
    try:
        # –Ü–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è –∞–±–æ –¥–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ—é–≤–∞–Ω–Ω—è
        if operation == "–Ü–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è":
            result = sp.integrate(function, x)
            st.success(f"–Ü–Ω—Ç–µ–≥—Ä–∞–ª: {result}")
        elif operation == "–î–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ—é–≤–∞–Ω–Ω—è":
            result = sp.diff(function, x)
            st.success(f"–ü–æ—Ö—ñ–¥–Ω–∞: {result}")
    except Exception as e:
        st.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è: {e}")

# –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∏–ª—å
st.markdown(
    """
    <style>
    body {
        background: linear-gradient(to bottom, #f0f2f6, #e6ecf3);
    }
    .stButton>button {
        background-color: #007BFF; /* –°–∏–Ω—ñ–π –∫–æ–ª—ñ—Ä –∫–Ω–æ–ø–∫–∏ */
        color: white;
        border: none;
        padding: 6px 12px; /* –†–æ–∑–º—ñ—Ä –∫–Ω–æ–ø–∫–∏ */
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 14px; /* –†–æ–∑–º—ñ—Ä —Ç–µ–∫—Å—Ç—É */
        margin: 4px 2px;
        border-radius: 8px;
        transition-duration: 0.4s;
    }
    .stButton>button:hover {
        background-color: #0056b3; /* –¢–µ–º–Ω—ñ—à–µ —Å–∏–Ω—ñ–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ */
        color: white;
    }
    </style>
    """,
    unsafe_allow_html=True
)
