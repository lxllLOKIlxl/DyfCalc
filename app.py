import matplotlib.pyplot as plt
import numpy as np
import streamlit as st
import sympy as sp
import asyncio
import websockets
import threading

if 'user_count' not in st.session_state:
    st.session_state['user_count'] = 1
st.session_state['user_count'] += 1

if 'chat_history' not in st.session_state:
    st.session_state['chat_history'] = []

async def websocket_client():
    uri = "ws://localhost:8765"
    async with websockets.connect(uri) as websocket:
        async for message in websocket:
            st.session_state["chat_history"].append(message)

def start_websocket_client():
    asyncio.run(websocket_client())

if 'websocket_thread' not in st.session_state:
    websocket_thread = threading.Thread(target=start_websocket_client, daemon=True)
    websocket_thread.start()
    st.session_state['websocket_thread'] = websocket_thread

async def send_message_to_websocket(message):
    uri = "ws://localhost:8765"
    async with websockets.connect(uri) as websocket:
        await websocket.send(message)

def send_message():
    if "user_message" in st.session_state and st.session_state["user_message"].strip():
        asyncio.run(send_message_to_websocket(st.session_state["user_message"].strip()))
        st.session_state["user_message"] = ""

st.markdown("<h1 style='text-align: center; color: blue;'>üî¢ DyfCalc</h1>", unsafe_allow_html=True)
st.markdown("<h3 style='text-align: center; color: gray;'>–Ü–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è —Ç–∞ –î–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ—é–≤–∞–Ω–Ω—è –§—É–Ω–∫—Ü—ñ–π</h3>", unsafe_allow_html=True)
st.markdown("---")

with st.sidebar:
    st.header("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
    st.markdown(f"![–õ—é–¥–∏–Ω–∞](https://img.icons8.com/emoji/48/null/bust-in-silhouette.png) **{st.session_state['user_count']} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á(—ñ/—ñ–≤) –æ–Ω–ª–∞–π–Ω**")
    st.markdown("---")
    st.header("üí¨ –û–Ω–ª–∞–π–Ω-—á–∞—Ç")
    for msg in st.session_state['chat_history']:
        st.write(msg)

    st.text_input("–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", value="", key="user_message")
    st.button("–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", key="send_button", on_click=send_message)

    st.markdown("---")
    st.header("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    operation = st.radio("–û–±–µ—Ä—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é:", ["–Ü–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è", "–î–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ—é–≤–∞–Ω–Ω—è"])
    theme = st.radio("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É:", ["–°–≤—ñ—Ç–ª–∞", "–¢–µ–º–Ω–∞"])
    st.markdown("---")

user_function = st.text_input("–ù–∞–ø—Ä–∏–∫–ª–∞–¥, x**2 - 4*x + y + z", placeholder="x**2 - 4*x + y + z")

if user_function:
    try:
        x, y, z = sp.symbols('x y z')
        function = sp.sympify(user_function)

        if sp.simplify(function).has(sp.zoo) or sp.simplify(function).has(sp.oo):
            raise ValueError("–§—É–Ω–∫—Ü—ñ—è –º–∞—î –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è!")

        substitutions = {var: 1 for var in [y, z] if var in function.free_symbols}
        function = function.subs(substitutions)

        func_np = sp.lambdify(x, function, "numpy")
        x_vals = np.linspace(-10, 10, 500)
        y_vals = func_np(x_vals)

        roots = sp.solve(function, x)
        roots_np = [float(root.evalf()) for root in roots if sp.im(root) == 0]

        if st.checkbox("üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó"):
            fig, ax = plt.subplots(figsize=(8, 5))
            ax.plot(x_vals, y_vals, label=f"f(x) = {user_function}", color="blue")

            for root in roots_np:
                ax.scatter(root, 0, color="red", s=50, label=f"–¢–æ—á–∫–∞ –ø–µ—Ä–µ—Ç–∏–Ω—É: {root:.2f}")
                ax.annotate(
                    f"{root:.2f}",
                    (root, 0),
                    textcoords="offset points",
                    xytext=(0, 10),
                    ha="center",
                    fontsize=10,
                    bbox=dict(boxstyle="round,pad=0.3", edgecolor="red", facecolor="lightyellow")
                )

            ax.set_title("–ì—Ä–∞—Ñ—ñ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó", fontsize=16)
            ax.set_xlabel("x", fontsize=14)
            ax.set_ylabel("f(x)", fontsize=14)
            ax.legend(loc="upper left")
            ax.grid(True)

            st.pyplot(fig)

    except ValueError as ve:
        st.error(f"–ü–æ–º–∏–ª–∫–∞: {ve}")
    except Exception as e:
        st.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")

if st.button("üîç –û–±—á–∏—Å–ª–∏—Ç–∏"):
    try:
        if operation == "–Ü–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è":
            result = sp.integrate(function, x)
            st.success(f"–Ü–Ω—Ç–µ–≥—Ä–∞–ª: {result}")
        elif operation == "–î–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ—é–≤–∞–Ω–Ω—è":
            result = sp.diff(function, x)
            st.success(f"–ü–æ—Ö—ñ–¥–Ω–∞: {result}")
    except Exception as e:
        st.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è: {e}")
