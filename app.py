import streamlit as st
import sympy as sp
import numpy as np
import plotly.graph_objs as go

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ñ–∑ —ñ–∫–æ–Ω–∫–æ—é
st.markdown("<h1 style='text-align: center;'>üî¢ DyfCalc</h1>", unsafe_allow_html=True)
st.markdown("<h3 style='text-align: center; color: gray;'>–Ü–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è —Ç–∞ –î–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ—é–≤–∞–Ω–Ω—è –§—É–Ω–∫—Ü—ñ–π</h3>", unsafe_allow_html=True)
st.markdown("---")

# –ë—ñ—á–Ω–µ –º–µ–Ω—é —ñ–∑ —á—ñ—Ç–∫–∏–º –≤–∏–±–æ—Ä–æ–º —ñ —ñ–∫–æ–Ω–∫–∞–º–∏
st.sidebar.markdown("## üõ†Ô∏è –û–±–µ—Ä—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é:")
operation = st.sidebar.radio(
    "",
    ["üßÆ –Ü–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è", "‚úÇÔ∏è –î–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ—é–≤–∞–Ω–Ω—è"],
    format_func=lambda x: x.split(" ")[1],  # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –ª–∏—à–µ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è —ñ–∫–æ–Ω–∫–∏
)

st.sidebar.markdown("---")

# –í–≤–µ–¥–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
st.markdown("### üßÆ –í–≤–µ–¥—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è:")
user_function = st.text_input("–í–≤–µ–¥—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é —Ç—É—Ç, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, x**2 - 4*x + 3", placeholder="x**2 - 4*x + 3")

if user_function:
    try:
        x = sp.symbols('x')
        function = sp.sympify(user_function)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è
        if st.button("üîç –û–±—á–∏—Å–ª–∏—Ç–∏"):
            if "–Ü–Ω—Ç–µ–≥—Ä—É–≤–∞–Ω–Ω—è" in operation:
                result = sp.integrate(function, x)
                st.success(f"–Ü–Ω—Ç–µ–≥—Ä–∞–ª: {result}")
            elif "–î–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ—é–≤–∞–Ω–Ω—è" in operation:
                result = sp.diff(function, x)
                st.success(f"–ü–æ—Ö—ñ–¥–Ω–∞: {result}")

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞
            if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫"):
                func_np = sp.lambdify(x, function, "numpy")
                x_vals = np.linspace(-10, 10, 500)
                y_vals = func_np(x_vals)

                # –¢–æ—á–∫–∏ –ø–µ—Ä–µ—Ç–∏–Ω—É
                roots = sp.solve(function, x)
                roots_np = [float(root.evalf()) for root in roots if sp.im(root) == 0]

                fig = go.Figure()
                fig.add_trace(go.Scatter(x=x_vals, y=y_vals, mode='lines', name=f"f(x) = {user_function}"))

                for root in roots_np:
                    fig.add_trace(go.Scatter(x=[root], y=[func_np(root)], mode='markers+text',
                                             marker=dict(size=10, color='red'),
                                             text=f"Root: {root:.2f}",
                                             textposition="top center",
                                             name="–¢–æ—á–∫–∞ –ø–µ—Ä–µ—Ç–∏–Ω—É"))

                fig.update_layout(
                    title="–ì—Ä–∞—Ñ—ñ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ —Ç–æ—á–∫–∞–º–∏ –ø–µ—Ä–µ—Ç–∏–Ω—É",
                    xaxis_title="x",
                    yaxis_title="f(x)",
                    template="plotly_white"
                )

                st.plotly_chart(fig)
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è—Ö —á–∏ –ø–æ–±—É–¥–æ–≤—ñ –≥—Ä–∞—Ñ—ñ–∫–∞: {e}")
